# prints out makefile for an awkweb project
# needs to be run as part of config job

END {
	if (HAS_DIED=="true") {
		exit -1
	}
	# check that some rules defined
	if (length(rules)==0) {
		die("ERROR: No rules defined in awkweb.ini")
	}

	# make renderer array
	parse_rule(renderers,p_renderers)
	
	print "#Auto generated by awkweb"
	
	# generate list of source files.. start by getting locations where files could be found


	for (rule in rules) {
		parse_rule(rules[rule],p_rule)
		if (p_rule["type"] == "static") {
			# if it is a static source, add it separately, since we are just going to copy it over anyways
			src_name = "SRC_" toupper(rule)
			print src_name "=$(shell find " rule " -type f)"
			build_name = "BUILD_" toupper(rule)
			print build_name "=$(patsubst " rule "%, build%,$(" src_name "))"
			build_names[build_name]=1 # add to list of builds we have done
			static_rules[rule]=1 # add to list of static rules
			# otherwise, add sourcefiles to list of source dirs
		} else if (p_rule["type"] == "page" || p_rule["type"] == ""){
			page_rules[rule]=1
		} else if (p_rule["type"] == "blogroll") {
			blogroll_rules[rule]=1 # add to list of blogroll rules
			build_name = "BUILD_" toupper(rule)
			print build_name "=build/" rule
			src_name = "SRC_" toupper(rule)
			find_cmd =  src_name "=$(shell find " p_rule["src"] " -false" 
			build_names[build_name]=1
			
			for (tmp_render in p_renderers) {
				find_cmd = find_cmd " -o -name *." tmp_render
			}
			find_cmd = find_cmd ")"
			print find_cmd
		}
	}
	for (source in page_rules) {
		for (ext in p_renderers) {
			cmd = p_renderers[ext]
			src_name = "SRC_" toupper(source) "_" toupper(ext)
			print src_name "=$(shell find " source " -name *." ext ")"
			build_name = "BUILD_" toupper(source) "_" toupper(ext)
			if (cmd=="cat") {
				print build_name "=$(patsubst " source "%, build%,$(" src_name "))"
			} else {
				print build_name "=$(patsubst " source "%, build%,$(" src_name ":." ext "=.html))"
			}
			build_names[build_name]=1
		}
	}

	# ok, now print main build target:
	print ".PHONY: website"
	
	# print website target:
	website_target = "website: "

	for (build in build_names) {
		website_target = website_target " $(" build ")"
	}
	print website_target

	# print clean target
	print ".PHONY: clean"
	print "clean:"
	print "\trm -r build"

	# print webserver target
	print "server: website"
	print "\tcd build && python3 -m http.server"

	# build instructions for each rule again
	for (rule in static_rules) {
		print "build/%:  " rule "/%"
		print "\tmkdir -p $(@D)"
		print "\tcp $< $@"
	}

	for (rule in page_rules) {

		n = split(rules[rule],lines,"\n")
		keyvals = ""
		for (i=1; i < n; i++) {
			keyvals = keyvals " " lines[i]
		}
		
		for (ext in p_renderers) {
			print "build/%.html: " rule "/%." ext
			print "\tmkdir -p $(@D)"
			print "\t" p_renderers[ext] " $< | puffin-render $< $@ " keyvals " > $@"
		}
	}

	for (rule in blogroll_rules) {

		n = split(rules[rule],lines,"\n")
		keyvals = ""
		for (i=1; i < n; i++) {
			keyvals = keyvals " '" lines[i] "'"
		}
		
		print "$(BUILD_" toupper(rule) "): " "$(SRC_" toupper(rule) ")"
		print "\tmkdir -p $(@D)"
		print "\tpuffin-render $< $@" keyvals "> $@"

	}
}
